#pragma once
#include <cstdint>
#include <kstddef.hpp>
#include <net/ipv4.hpp>
#include <net/net.hpp>
#include <net/tcp.hpp>
#include <stl/vector.hpp>

enum class TLS_VERSION : uint16_t { TLS_1_0 = 0x0301, TLS_1_1 = 0x0302, TLS_1_2 = 0x0303, TLS_1_3 = 0x0304 };

enum class TLS_RECORD_TYPE : uint8_t {
	CHANGE_CIPHER_SPEC = 20,
	ALERT = 21,
	HANDSHAKE = 22,
	APPLICATION_DATA = 23,
	HEARTBEAT = 24,
};

enum TLS_ALERT_LEVEL : uint8_t {
	NONFATAL = 1,
	FATAL = 2,
};

enum TLS_ALERT_DESC : uint8_t {
	CLOSE_NOTIFY = 0,
	UNEXPECTED_MESSAGE = 10,
	BAD_RECORD_MAC = 20,
	DECRYPTION_FAILED_RESERVED = 21,
	RECORD_OVERFLOW = 22,
	DECOMPRESSION_FAILURE_RESERVED = 30,
	HANDSHAKE_FAILURE = 40,
	NO_CERTIFICATE_RESERVED = 41,
	BAD_CERTIFICATE = 42,
	UNSUPPORTED_CERTIFICATE = 43,
	CERTIFICATE_REVOKED = 44,
	CERTIFICATE_EXPIRED = 45,
	CERTIFICATE_UNKNOWN = 46,
	ILLEGAL_PARAMETER = 47,
	UNKNOWN_CA = 48,
	ACCESS_DENIED = 49,
	DECODE_ERROR = 50,
	DECRYPT_ERROR = 51,
	EXPORT_RESTRICTION_RESERVED = 60,
	PROTOCOL_VERSION = 70,
	INSUFFICIENT_SECURITY = 71,
	INTERNAL_ERROR = 80,
	INAPPROPRIATE_FALLBACK = 86,
	USER_CANCELED = 90,
	NO_RENEGOTIATION_RESERVED = 100,
	MISSING_EXTENSION = 109,
	UNSUPPORTED_EXTENSION = 110,
	CERTIFICATE_UNOBTAINABLE_RESERVED = 111,
	UNRECOGNIZED_NAME = 112,
	BAD_CERTIFICATE_STATUS_RESPONSE = 113,
	BAD_CERTIFICATE_HASH_VALUE_RESERVED = 114,
	UNKNOWN_PSK_IDENTITY = 115,
	CERTIFICATE_REQUIRED = 116,
	NO_APPLICATION_PROTOCOL = 120,
};

enum class TLS_HANDSHAKE_TYPE : uint8_t {
	CLIENT_HELLO = 1,
	SERVER_HELLO = 2,
	NEW_SESSION_TICKET = 4,
	END_OF_EARLY_DATA = 5,
	ENCRYPTED_EXTENSIONS = 8,
	CERTIFICATE = 11,
	CERTIFICATE_REQUEST = 13,
	CERTIFICATE_VERIFY = 15,
	FINISHED = 20,
	KEY_UPDATE = 24,
	MESSAGE_HASH = 254
};

enum class TLS_CIPHER : uint16_t {
	RSA_WITH_3DES_EDE_CBC_SHA = 0x000a,
	RSA_WITH_AES_128_CBC_SHA = 0x002f,
	DHE_DSS_WITH_AES_128_CBC_SHA = 0x0032,
	DHE_RSA_WITH_AES_128_CBC_SHA = 0x0033,
	RSA_WITH_AES_256_CBC_SHA = 0x0035,
	DHE_DSS_WITH_AES_256_CBC_SHA = 0x0038,
	DHE_RSA_WITH_AES_256_CBC_SHA = 0x0039,
	RSA_WITH_AES_128_CBC_SHA256 = 0x003c,
	RSA_WITH_AES_256_CBC_SHA256 = 0x003d,
	DHE_DSS_WITH_AES_128_CBC_SHA256 = 0x0040,
	DHE_RSA_WITH_AES_128_CBC_SHA256 = 0x0067,
	DHE_DSS_WITH_AES_256_CBC_SHA256 = 0x006a,
	DHE_RSA_WITH_AES_256_CBC_SHA256 = 0x006b,
	RSA_WITH_AES_128_GCM_SHA256 = 0x009c,
	RSA_WITH_AES_256_GCM_SHA384 = 0x009d,
	DHE_RSA_WITH_AES128_GCM_SHA256 = 0x009e,
	DHE_RSA_WITH_AES256_GCM_SHA384 = 0x009f,
	DHE_DSS_WITH_AES_128_GCM_SHA256 = 0x00a2,
	DHE_DSS_WITH_AES_256_GCM_SHA384 = 0x00a3,
	AES_128_GCM_SHA256 = 0x1301,
	AES_256_GCM_SHA384 = 0x1302,
	CHACHA20_POLY1305_SHA256 = 0x1303,
	ECDHE_ECDSA_WITH_AES_128_CBC_SHA = 0xc009,
	ECDHE_ECDSA_WITH_AES_256_CBC_SHA = 0xc00a,
	ECDHE_RSA_WITH_AES_128_CBC_SHA = 0xc013,
	ECDHE_RSA_WITH_AES_256_CBC_SHA = 0xc014,
	ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = 0xc023,
	ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = 0xc024,
	ECDHE_RSA_WITH_AES_128_CBC_SHA256 = 0xc027,
	ECDHE_RSA_WITH_AES_256_CBC_SHA384 = 0xc028,
	ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = 0xc02b,
	ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = 0xc02c,
	ECDHE_RSA_WITH_AES_128_GCM_SHA256 = 0xc02f,
	ECDHE_RSA_WITH_AES_256_GCM_SHA384 = 0xc030,
	RSA_WITH_ARIA_128_GCM_SHA256 = 0xc050,
	RSA_WITH_ARIA_256_GCM_SHA384 = 0xc051,
	DHE_RSA_WITH_ARIA_128_GCM_SHA256 = 0xc052,
	DHE_RSA_WITH_ARIA_256_GCM_SHA384 = 0xc053,
	DHE_DSS_WITH_ARIA_128_GCM_SHA256 = 0xc056,
	DHE_DSS_WITH_ARIA_256_GCM_SHA384 = 0xc057,
	ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256 = 0xc05c,
	ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384 = 0xc05d,
	ECDHE_RSA_WITH_ARIA_128_GCM_SHA256 = 0xc060,
	ECDHE_RSA_WITH_ARIA_256_GCM_SHA384 = 0xc061,
	RSA_WITH_AES_128_CCM = 0xc09c,
	RSA_WITH_AES_256_CCM = 0xc09d,
	DHE_RSA_WITH_AES_128_CCM = 0xc09e,
	DHE_RSA_WITH_AES_256_CCM = 0xc09f,
	RSA_WITH_AES_128_CCM_8 = 0xc0a0,
	RSA_WITH_AES_256_CCM_8 = 0xc0a1,
	DHE_RSA_WITH_AES_128_CCM_8 = 0xc0a2,
	DHE_RSA_WITH_AES_256_CCM_8 = 0xc0a3,
	ECDHE_ECDSA_WITH_AES_128_CCM = 0xc0ac,
	ECDHE_ECDSA_WITH_AES_256_CCM = 0xc0ad,
	ECDHE_ECDSA_WITH_AES_128_CCM_8 = 0xc0ae,
	ECDHE_ECDSA_WITH_AES_256_CCM_8 = 0xc0af,
	ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = 0xcca8,
	ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 = 0xcca9,
	DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = 0xccaa,

	EMPTY_RENEGOTIATION_INFO_SCSV = 0x00ff
};

struct [[gnu::packed]] tls_record_header {
	TLS_RECORD_TYPE type;
	TLS_VERSION version;
	uint16_t length;
};

struct [[gnu::packed]] tls_alert_header {
	TLS_ALERT_LEVEL level;
	TLS_ALERT_DESC description;
};

struct [[gnu::packed]] tls_handshake_header {
	uint32_t type : 8;
	uint32_t length : 24;
};

namespace tls_handshake {
struct [[gnu::packed]] client_hello {
	TLS_VERSION version;
	std::byte random[32];
	vector<std::byte> session_id;
	vector<std::byte> cipher_suites;
	vector<std::byte> compression_methods;
	vector<std::byte> extensions;
};
}

struct tls_info : ipv4_info {};
using tls_packet = packet<tls_info>;

struct tls_connection {
	tcp_connection transport;
};

using tls_conn_t = tls_connection*;